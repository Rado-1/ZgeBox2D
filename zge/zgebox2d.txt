ZZDC<?xml version="1.0" encoding="iso-8859-1" ?>
<ZExternalLibrary Comment="Box2D physics library" ModuleName="ZgeBox2D" CallingConvention="1" BeforeInitExp="if(ANDROID) this.ModuleName = &quot;./libZgeBox2D.so&quot;;">
  <Source>
<![CDATA[/*
  Adapter to the ZgeBox2D Library, a wrapper for the Box2D Physics Engine.
  http://box2d.org/

  Download Windows DLL and Android shared library from
  https://github.com/Rado-1/ZgeBox2D/releases

  Project home
  https://github.com/Rado-1/ZgeBox2D

  Copyright (c) 2013-2016 Radovan Cervenka

  Version: 1.0 (2016-10-27)

  */

// Constants

// type of body
const int
  ZB2_STATIC = 0,
  ZB2_KINEMATIC = 1,
  ZB2_DYNAMIC = 2;

// state of contact point
const int
  ZB2_NULL_STATE = 0,    // point does not exist
  ZB2_ADD_STATE = 1,     // point was added in the update
  ZB2_PERSIST_STATE = 2, // point persisted across the update
  ZB2_REMOVE_STATE = 3;  // point was removed in the update

// World

// init
void zb2InitWorld(float gravityX, float gravityY) {}

// destroy
void zb2DestroyWorld() {}

// allow/suppress global collision detection
void zb2AllowCollisionDetection(int allow) {}

// advance simulation
void zb2Step(float timeStep, int velocityIterations, int positionIterations) {}

// clear forces
void zb2ClearForces() {}

// allow/suppress sleeping of inactive bodies
void zb2SetAllowSleeping(int allow) {}

// set gravity
void zb2SetGravity(float x, float y) {}

// enable/disable warm starting; for testing
void zb2SetWarmStarting(int enable) {}

// count bodies
int zb2GetBodyCount() {}

void zb2DestroyAllBodies() {}

// Bodies

// create and return a static body without shape
xptr zb2CreateEmptyBody(float x, float y, int type) {}

// create and return box
xptr zb2CreateBox(float x, float y, float width, float height, float angle, int type) {}

// create and return circle
xptr zb2CreateCircle(float x, float y, float radius, int type) {}

// create and return polygon (up to 8 vertices)
// vertices - 2D array of floats or 1D array of vec2
xptr zb2CreatePolygon(float x, float y, xptr vertices, int count, float angle, int type) {}

// create and return static edge
xptr zb2CreateEdge(float x1, float y1, float x2, float y2) {}

// create and return static chain
// vertices - 2D array of floats or 1D array of vec2
xptr zb2CreateChain(xptr vertices, int count, int isLoop) {}

// compound bodies

// add box to existing body
void zb2AddBox(xptr body, float x, float y, float width, float height,
  float angle) {}

// add circle to existing body
void zb2AddCircle(xptr body, float x, float y, float radius) {}

// add polygon to existing body
// vertices - 2D array of floats or 1D array of vec2
void zb2AddPolygon(xptr body, xptr vertices, int count) {}

// add edge to existing body
void zb2AddEdge(xptr body, float x1, float y1, float x2, float y2) {}

// add chain to existing body
// vertices - 2D array of floats or 1D array of vec2
void zb2AddChain(xptr body, xptr vertices, int count, int isLoop) {}

// destroy body
void zb2DestroyBody(xptr body) {}

// getters
float zb2GetPositionX(xptr body) {}
float zb2GetPositionY(xptr body) {}
float zb2GetAngle(xptr body) {}
void zb2GetTransform(xptr body, ref float x, ref float y, ref float angle) {}
float zb2GetMass(xptr body) {}
int zb2IsAwake(xptr body) {}

// setters
void zb2SetPosition(xptr body, float x, float y) {}
void zb2SetRotation(xptr body, float angle) {}
void zb2SetTransform(xptr body, float x, float y, float angle) {}
void zb2SetLinearVelocity(xptr body, float x, float y) {}
void zb2SetAngularVelocity(xptr body, float omega) {}
void zb2SetLinearDamping(xptr body, float linearDamping) {}
void zb2SetAngularDamping(xptr body, float angularDamping) {}
void zb2SetDensity(xptr body, float density) {}
void zb2SetFriction(xptr body, float friction) {} // can be more than 1.0
void zb2SetRestitution(xptr body, float restitution) {}
void zb2SetGravityScale(xptr body, float gravityScale) {} // -1.0 - reverse gravity
void zb2SetFixedRotation(xptr body, int hasFixedRotation) {}
void zb2SetSleepingAllowed(xptr body, int isSleepingAllowed) {}
void zb2SetBullet(xptr body, int isBullet) {}
void zb2SetSensor(xptr body, int isSensor) {}
void zb2SetActive(xptr body, int isActive) {}
void zb2SetMass(xptr body, float mass) {}
void zb2SetMassData(xptr body, float mass, float x, float y, float rotationalInertia) {}
void zb2ResetMassData(xptr body) {}

// apply forces
void zb2ApplyForce(xptr body, float forceX, float forceY, float pointX, float pointY, int wake) {}
void zb2ApplyForceToCenter(xptr body, float forceX, float forceY, int wake) {}
void zb2ApplyTorque(xptr body, float torque, int wake) {}
void zb2ApplyLinearImpulse(xptr body, float impulseX, float impulseY, float pointX, float pointY, int wake) {}
void zb2ApplyAngularImpulse(xptr body, float impulse, int wake) {}

// changing shapes
void zb2ChangeCircleRadius(xptr body, float radius) {}
void zb2ChangeEdge(xptr body, float x1, float y1, float x2, float y2) {}

// Joints

// create and return distance joint
// local coordinates used
xptr zb2CreateDistanceJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy, float length,
	float frequency, float dampingRatio, int isCollided) {}

// create and return distance joint
// world coordinates used
xptr zb2CreateDistanceJointWorld(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy, float length,
	float frequency, float dampingRatio, int isCollided) {}

// update distance joint
void zb2UpdateDistanceJoint(xptr joint, float length,
	float frequency, float dampingRatio) {}

// create and return prismatic joint
// local coordinates used
xptr zb2CreatePrismaticJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float axisAx, float axisAy, float referenceAngle,
	int enableLimit, float lower, float upper,
	int enableMotor, float maxMotorForce, float motorSpeed, int isCollided) {}

// create and return prismatic joint
// world coordinates used
xptr zb2CreatePrismaticJointWorld(xptr bodyA, xptr bodyB,
	float anchorX, float anchorY, float axisX, float axisY,
	int enableLimit, float lower, float upper,
	int enableMotor, float maxMotorForce, float motorSpeed, int isCollided) {}

// update prismatic joint
void zb2UpdatePrismaticJoint(xptr joint,
	int enableLimit, float lower, float upper,
	int enableMotor, float maxMotorForce, float motorSpeed) {}

// get current translation of prismatic joint
float zb2GetPrismaticTranslation(xptr joint) {}

// get current speed of prismatic joint
float zb2GetPrismaticSpeed(xptr joint) {}

// create and return revolute joint
// local coordinates used
xptr zb2CreateRevoluteJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float referenceAngle, int enableLimit, float lowerAngle, float upperAngle,
	int enableMotor, float motorSpeed, float maxMotorTorque, int isCollided) {}

// create and return revolute joint
// world coordinates used
xptr zb2CreateRevoluteJointWorld(xptr bodyA, xptr bodyB,
	float anchorX, float anchorY, int enableLimit, float lowerAngle, float upperAngle,
	int enableMotor, float motorSpeed, float maxMotorTorque, int isCollided) {}

// update revolute joint
void zb2UpdateRevoluteJoint(xptr joint,
	int enableLimit, float lowerAngle, float upperAngle,
	int enableMotor, float motorSpeed, float maxMotorTorque) {}

// get current angle of revolute joint
float zb2GetRevoluteAngle(xptr joint) {}

// create and return weld joint
// local coordinates used
xptr zb2CreateWeldJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float referenceAngle, float frequency, float dampingRatio, int isCollided) {}

// create and return weld joint
// world coordinates used
xptr zb2CreateWeldJointWorld(xptr bodyA, xptr bodyB,
	float anchorX, float anchorY, float frequency, float dampingRatio,
	int isCollided) {}

// update weld joint
void zb2UpdateWeldJoint(xptr joint, float frequency, float dampingRatio) {}

// create and return rope joint
// local coordinates used
xptr zb2CreateRopeJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float maxLength, int isCollided) {}

// update rope joint
void zb2UpdateRopeJoint(xptr joint, float maxLength) {}

// create and return pulley joint
// local coordinates used
xptr zb2CreatePulleyJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float groundAx, float groundAy, float groundBx, float groundBy,
	float lengthA, float lengthB, float ratio, int isCollided) {}

// create and return pulley joint
// world coordinates used
xptr zb2CreatePulleyJointWorld(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float groundAx, float groundAy, float groundBx, float groundBy,
	float ratio, int isCollided) {}

// get length of rope at side A of pulley joint
float zb2GetPulleyLengthA(xptr joint) {}

// get length of rope at side B of pulley joint
float zb2GetPulleyLengthB(xptr joint) {}

// create and return gear joint
// only revolute and/or prismatic joints can be connected
xptr zb2CreateGearJoint(xptr joint1, xptr joint2, float ratio, int isCollided) {}

// update gear joint
void zb2UpdateGearJoint(xptr joint, float ratio) {}

// create and return wheel joint
// local coordinates used
xptr zb2CreateWheelJoint(xptr bodyA, xptr bodyB,
	float anchorAx, float anchorAy, float anchorBx, float anchorBy,
	float axisAx, float axisAy,
	int enableMotor, float motorSpeed, float maxMotorTorque,
	float frequency, float dampingRatio, int isCollided) {}

// create and return wheel joint
// world coordinates used
xptr zb2CreateWheelJointWorld(xptr bodyA, xptr bodyB,
	float anchorX, float anchorY,float axisX, float axisY,
	int enableMotor, float motorSpeed, float maxMotorTorque,
	float frequency, float dampingRatio, int isCollided) {}

// update wheel joint
void zb2UpdateWheelJoint(xptr joint, int enableMotor,
	float motorSpeed, float maxMotorTorque,
	float frequency, float dampingRatio) {}

// get wheel joint's spring translation
float zb2GetWheelTranslation(xptr joint) {}

// get wheel's angle
float zb2GetWheelAngle(xptr joint) {}

// get wheel joint's spring translation speed
float zb2GetWheelLinearSpeed(xptr joint) {}

// get wheel's angular speed
float zb2GetWheelAngularSpeed(xptr joint) {}

// create and return motor joint
// local coordinates used
xptr zb2CreateMotorJoint(xptr bodyA, xptr bodyB,
	float linearOffsetX, float linearOffsetY, float angularOffset,
	float maxForce, float maxTorque, float correctionFactor, int isCollided) {}

// create and return motor joint
// world coordinates used
xptr zb2CreateMotorJointWorld(xptr bodyA, xptr bodyB,
	float maxForce, float maxTorque, float correctionFactor, int isCollided) {}

// update motor joint
void zb2UpdateMotorJoint(xptr joint,
	float linearOffsetX, float linearOffsetY, float angularOffset,
	float maxForce, float maxTorque, float correctionFactor) {}

// create and return mouse joint
// world coordinates used
xptr zb2CreateMouseJoint(xptr body, float targetX, float targetY,
	float maxForce,	float frequency, float dampingRatio) {}

// update target of mouse joint
void zb2UpdateMouseJoint(xptr joint, float targetX, float targetY) {}

// destroy joint
void zb2DestroyJoint(xptr joint) {}

// get all joints of a body
// jointList - array of integers (1D) having sufficient size
void zb2GetJoints(xptr body, xptr jointList, ref int count) {}

// Custom user data

// set ZGE models
void zb2SetUserModelToBody(xptr body, model userModel) {}
void zb2SetUserModelToJoint(xptr joint, model userModel) {}

// get ZGE models
model zb2GetUserModelFromBody(xptr body) {}
model zb2GetUserModelFromJoint(xptr joint) {}

// Queries

// test containment of point in body
int zb2TestPoint(xptr body, float x, float y) {}

// get body at point or 0 if no body is there
int zb2GetBodyAtPoint(float x, float y, ref xptr body) {}

// raycast
// returns found body or null if no body found
xptr zb2RayCast(float x1, float y1, float x2, float y2,
	ref float x, ref float y, ref float normalX, ref float normalY) {}

// Collisions

// initialize getting of global collision points
void zb2ResetContacts() {}

// get next global collision point
// returns:
//    1 - next collision point was returned
//    0 - no other collision point is available
int zb2GetNextContact(ref xptr bodyA, ref xptr bodyB,
  ref float posX, ref float posY,
	ref float normX, ref float normY,
  ref int state) {}

// number of global collision points
int zb2GetContactCount() {}

// is body collided?
int zb2IsCollided(xptr body) {}

// number of collisions of given body
int zb2GetBodyContactCount(xptr body) {}

// set collision filtering flags to body
void zb2SetBodyFilteringFlags(xptr body, int categoryBits, int maskBits, int groupIndex) {}]]>
  </Source>
</ZExternalLibrary>
